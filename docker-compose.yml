services:
    app-node:
        container_name: app-node
        build:
            context: .
            dockerfile: ./services/app-node/Dockerfile
        command: [
            "node",
            "worker.js",
            "--wtype", "wrk-node-http",
            "--env", "development",
            "--port", "3000"
        ]
        volumes:
            - ./services/app-node/config/common.json:/app/services/app-node/config/common.json:ro
            - ./services/app-node/config/facs:/app/services/app-node/config/facs:ro
        restart: unless-stopped
        ports:
            - "3000:3000"
        networks:
            - backend_network

    wrk-book:
        container_name: wrk-book
        build:
            context: .
            dockerfile: ./services/wrk-book/Dockerfile
        command: [
            "node",
            "worker.js",
            "--wtype", "wrk-book-rack",
            "--env", "development",
            "--rack", "25d0c2e5-3d14-4975-bddf-b836bdf3842a9",
            "--debug", "false"
        ]
        volumes:
            - ./services/wrk-book/config/common.json:/app/services/wrk-book/config/common.json:ro
            - ./services/wrk-book/config/facs:/app/services/wrk-book/config/facs:ro
        restart: unless-stopped
        networks:
            - backend_network

    wrk-ork:
        container_name: wrk-ork
        build:
            context: .
            dockerfile: ./services/wrk-ork/Dockerfile
        command: [
            "node",
            "worker.js",
            "--wtype", "wrk-ork-proc-aggr",
            "--env", "development",
            "--cluster", "1"
        ]
        volumes:
            - ./services/wrk-ork/config/common.json:/app/services/wrk-ork/config/common.json:ro
            - ./services/wrk-ork/config/facs:/app/services/wrk-ork/config/facs:ro
        restart: unless-stopped
        networks:
            - backend_network

    prometheus:
        image: prom/prometheus:v2.37.0
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
            - backend_network
        restart: unless-stopped

    grafana:
        image: grafana/grafana:9.1.0
        container_name: grafana
        ports:
            - "9191:3000"
        volumes:
            - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
        networks:
            - backend_network
        restart: unless-stopped

networks:
    backend_network:
        driver: bridge